package ui

import system.BankingSystem
import entities.Bank
import entities.PhysicalPerson
import enums.InterestCalculation

/**
 * –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞–º–∏, –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Å—á–µ—Ç–∞–º–∏
 */
class BankingApp(private val system: BankingSystem) {

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun start() {
        println("=== –ë–ê–ù–ö–û–í–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê ===")
        println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞–º–∏!")

        while (true) {
            showMainMenu()
            when (readLine()?.trim()) {
                "1" -> bankMenu()
                "2" -> personMenu()
                "3" -> accountMenu()
                "4" -> operationMenu()
                "5" -> showStatistics()
                "0" -> {
                    println("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
                    return
                }
                else -> println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            }
        }
    }

    // region –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    private fun showMainMenu() {
        println("\n=== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===")
        println("1. üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞–º–∏")
        println("2. üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        println("3. üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏")
        println("4. üí∞ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—á–µ—Ç–∞–º–∏")
        println("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        println("0. üö™ –í—ã—Ö–æ–¥")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")
    }

    // endregion

    // region –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞–º–∏

    private fun bankMenu() {
        while (true) {
            println("\n=== üè¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ù–ö–ê–ú–ò ===")
            println("1. –°–æ–∑–¥–∞—Ç—å –±–∞–Ω–∫")
            println("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∞–Ω–∫–∏")
            println("3. –ù–∞–π—Ç–∏ –±–∞–Ω–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
            println("4. –°—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ")
            println("0. –ù–∞–∑–∞–¥")
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")

            when (readLine()?.trim()) {
                "1" -> createBank()
                "2" -> showAllBanks()
                "3" -> findBank()
                "4" -> showBankAccounts()
                "0" -> return
                else -> println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            }
        }
    }

    private fun createBank() {
        println("\n--- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–∞ ---")

        try {
            print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: ")
            val fullName = readLine()?.trim() ?: ""

            print("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: ")
            val shortName = readLine()?.trim() ?: ""

            print("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç–∞–º (0.1-2.0): ")
            val rate = readLine()?.toDoubleOrNull() ?: 0.0

            val bank = system.addBank(fullName, shortName, rate)
            println("‚úÖ –ë–∞–Ω–∫ '${bank.shortName}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–∫–∞: ${e.message}")
        }
    }

    private fun showAllBanks() {
        println("\n--- –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ ---")
        val banks = system.getAllBanks()
        if (banks.isEmpty()) {
            println("üì≠ –ë–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        } else {
            banks.forEachIndexed { index, bank ->
                println("${index + 1}. ${bank.fullName} (${bank.shortName}) - ${bank.interestRate}%")
            }
        }
    }

    private fun findBank() {
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: ")
        val name = readLine()?.trim() ?: ""
        val bank = system.findBankByName(name)

        if (bank != null) {
            println("‚úÖ –ù–∞–π–¥–µ–Ω –±–∞–Ω–∫: ${bank.fullName} (${bank.shortName})")
        } else {
            println("‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    private fun showBankAccounts() {
        val bank = selectBank() ?: return
        val accounts = system.findAccountsByBank(bank)

        println("\n--- –°—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ ${bank.shortName} ---")
        if (accounts.isEmpty()) {
            println("üì≠ –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        } else {
            accounts.forEachIndexed { index, account ->
                println("${index + 1}. ${account.getAccountInfo()}")
            }
        }
    }

    // endregion

    // region –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏

    private fun personMenu() {
        while (true) {
            println("\n=== üë§ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò ===")
            println("1. –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
            println("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            println("3. –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù")
            println("4. –°—á–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞")
            println("0. –ù–∞–∑–∞–¥")
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")

            when (readLine()?.trim()) {
                "1" -> createPerson()
                "2" -> showAllPersons()
                "3" -> findPerson()
                "4" -> showPersonAccounts()
                "0" -> return
                else -> println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            }
        }
    }

    private fun createPerson() {
        println("\n--- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---")

        try {
            print("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞: ")
            val fio = readLine()?.trim() ?: ""

            print("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (12 —Ü–∏—Ñ—Ä): ")
            val inn = readLine()?.trim() ?: ""

            print("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã): ")
            val serPas = readLine()?.trim() ?: ""

            print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä): ")
            val numPas = readLine()?.trim() ?: ""

            val person = system.addPerson(fio, inn, numPas, serPas)
            println("‚úÖ –ö–ª–∏–µ–Ω—Ç '${person.fio}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${e.message}")
        }
    }

    private fun showAllPersons() {
        println("\n--- –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---")
        val persons = system.getAllPersons()
        if (persons.isEmpty()) {
            println("üì≠ –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        } else {
            persons.forEachIndexed { index, person ->
                println("${index + 1}. ${person.fio} (–ò–ù–ù: ${person.inn})")
            }
        }
    }

    private fun findPerson() {
        print("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–ª–∏–µ–Ω—Ç–∞: ")
        val inn = readLine()?.trim() ?: ""
        val person = system.findPersonByINN(inn)

        if (person != null) {
            println("‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: ${person.fio}")
        } else {
            println("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    private fun showPersonAccounts() {
        val person = selectPerson() ?: return
        val accounts = system.findAccountsByPerson(person)

        println("\n--- –°—á–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${person.fio} ---")
        if (accounts.isEmpty()) {
            println("üì≠ –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        } else {
            accounts.forEachIndexed { index, account ->
                println("${index + 1}. ${account.getAccountInfo()}")
            }
        }
    }

    // endregion

    // region –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞–º–∏

    private fun accountMenu() {
        while (true) {
            println("\n=== üí≥ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ê–ú–ò ===")
            println("1. –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç")
            println("2. –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á–µ—Ç")
            println("3. –û—Ç–∫—Ä—ã—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç")
            println("4. –ù–∞–π—Ç–∏ —Å—á–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É")
            println("0. –ù–∞–∑–∞–¥")
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")

            when (readLine()?.trim()) {
                "1" -> createCurrentAccount()
                "2" -> createDepositAccount()
                "3" -> createCreditAccount()
                "4" -> findAccount()
                "0" -> return
                else -> println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            }
        }
    }

    private fun createCurrentAccount() {
        println("\n--- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞ ---")

        try {
            val person = selectPerson() ?: return
            val bank = selectBank() ?: return

            print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ")
            val balance = readLine()?.toDoubleOrNull() ?: 0.0

            val account = system.createCurrentAccount(person, bank, balance)
            println("‚úÖ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç!")
            println("üìã –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ${account.accountNumber}")
            println("üí≥ –ë–∞–ª–∞–Ω—Å: $balance")

        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—á–µ—Ç–∞: ${e.message}")
        }
    }

    private fun createDepositAccount() {
        println("\n--- –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ ---")

        try {
            val person = selectPerson() ?: return
            val bank = selectBank() ?: return

            print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞: ")
            val balance = readLine()?.toDoubleOrNull() ?: 0.0

            print("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ (–º–µ—Å—è—Ü–µ–≤, –º–∏–Ω–∏–º—É–º 3): ")
            val term = readLine()?.toIntOrNull() ?: 3

            print("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ")
            val minBalance = readLine()?.toDoubleOrNull() ?: 0.0

            print("–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤? (–¥–∞/–Ω–µ—Ç): ")
            val isWithdrawable = readLine()?.trim()?.equals("–¥–∞", ignoreCase = true) ?: false

            print("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é —Å—Ç–∞–≤–∫—É (18-25%): ")
            val rate = readLine()?.toDoubleOrNull() ?: 18.0

            print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (daily/monthly): ")
            val interestType = if (readLine()?.trim()?.equals("daily", ignoreCase = true) == true) {
                InterestCalculation.DAILY
            } else {
                InterestCalculation.MONTHLY
            }

            print("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ")
            val isProlongable = readLine()?.trim()?.equals("–¥–∞", ignoreCase = true) ?: false

            val account = system.createDepositAccount(
                person, bank, balance, term, minBalance,
                isWithdrawable = isWithdrawable,
                annualRate = rate,
                interestCalculation = interestType,
                isProlongable = isProlongable
            )
            println("‚úÖ –î–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç!")
            println("üìã –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ${account.accountNumber}")
            println("üí∞ –°—É–º–º–∞: $balance")
            println("üìÖ –°—Ä–æ–∫: $term –º–µ—Å—è—Ü–µ–≤")
            println("üéØ –°—Ç–∞–≤–∫–∞: $rate%")

        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ${e.message}")
        }
    }

    private fun createCreditAccount() {
        println("\n--- –û—Ç–∫—Ä—ã—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ ---")

        try {
            val person = selectPerson() ?: return
            val bank = selectBank() ?: return

            print("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç: ")
            val limit = readLine()?.toDoubleOrNull() ?: 0.0

            print("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ –∫—Ä–µ–¥–∏—Ç—É: ")
            val rate = readLine()?.toDoubleOrNull() ?: 0.0

            print("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–º–µ—Å—è—Ü–µ–≤): ")
            val term = readLine()?.toIntOrNull() ?: 12

            val account = system.createCreditAccount(person, bank, limit, rate, term)
            println("‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç!")
            println("üìã –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ${account.accountNumber}")
            println("üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç: $limit")
            println("üéØ –°—Ç–∞–≤–∫–∞: $rate%")

        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞: ${e.message}")
        }
    }

    private fun findAccount() {
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: ")
        val number = readLine()?.trim() ?: ""
        val account = system.findAccountByNumber(number)

        if (account != null) {
            println("‚úÖ –ù–∞–π–¥–µ–Ω —Å—á–µ—Ç:")
            println("üìã ${account.getAccountInfo()}")
        } else {
            println("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    // endregion

    // region –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—á–µ—Ç–∞–º–∏

    private fun operationMenu() {
        while (true) {
            println("\n=== üí∞ –û–ü–ï–†–ê–¶–ò–ò –°–û –°–ß–ï–¢–ê–ú–ò ===")
            println("1. –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç")
            println("2. –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")
            println("3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ")
            println("0. –ù–∞–∑–∞–¥")
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")

            when (readLine()?.trim()) {
                "1" -> depositOperation()
                "2" -> withdrawOperation()
                "3" -> accountInfoOperation()
                "0" -> return
                else -> println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            }
        }
    }

    private fun depositOperation() {
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: ")
        val accountNumber = readLine()?.trim() ?: ""

        print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ")
        val amount = readLine()?.toDoubleOrNull() ?: 0.0

        if (system.depositToAccount(accountNumber, amount)) {
            println("‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $amount")
        } else {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞")
        }
    }

    private fun withdrawOperation() {
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: ")
        val accountNumber = readLine()?.trim() ?: ""

        print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω—è—Ç–∏—è: ")
        val amount = readLine()?.toDoubleOrNull() ?: 0.0

        if (system.withdrawFromAccount(accountNumber, amount)) {
            println("‚úÖ –°–æ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ $amount")
        } else {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
        }
    }

    private fun accountInfoOperation() {
        findAccount()
    }

    // endregion

    // region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private fun selectPerson(): PhysicalPerson? {
        showAllPersons()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ (–≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù): ")
        val inn = readLine()?.trim() ?: ""
        val person = system.findPersonByINN(inn)

        if (person == null) {
            println("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return null
        }
        return person
    }

    private fun selectBank(): Bank? {
        showAllBanks()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ (–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ): ")
        val name = readLine()?.trim() ?: ""
        val bank = system.findBankByName(name)

        if (bank == null) {
            println("‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return null
        }
        return bank
    }

    private fun showStatistics() {
        println("\n=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ===")
        println("üè¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤: ${system.getAllBanks().size}")
        println("üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${system.getAllPersons().size}")
        println("üí≥ –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: ${system.getTotalAccounts()}")
        println("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤: ${system.getActiveAccounts()}")
        println("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${system.getTotalBalance()}")
    }

    // endregion
}